1.
    if (s == "Hello"){
        initNewGame();
    }  C나 다른 언어들에서는 이상이 없어 보인다. 
    
    하지만 JAVA에서는 위와 같이 하면 안된다.
    if (s.equals("Hello")){
        initNewGame();
    }

    == -> 주소 비교
    .equals -> 내용 비교
2.
    String str1 = "java";
    String str2 = "java";
    String str3 = New String("java");

    str1 == str2 -> True 
    주소값은 다르지만 자바의 작동 원리를 알아야한다. == 연산자는 주소 비교를 한다. 그러므로 C언어에서는 다른 주소이므로 False가 나와야한다.
    자바는 객체가 너무 많아 부담스러워 그 객체를 줄여야 하고, 내부적으로 그 객체를 줄이기위해 String pool 이라는 것을 가지고있다. 
    문자열이 배치될 때, String pool에 넣어놓고 똑같은 문자열이 오면 같은 주소를 할당해준다. 그래서 결론적으로 같은 주소를 가지게 된다.
    str1 == str3 False
    str1.equals(str2) -> True
    str1.equals(str3) -> True

    안드로이드는 어려운 것이 아니다. Java를 확실히 알아야 한다.

3.
    String Class -> 우리가 위에 알고 있는 equals로 내용을 비교한다. 
    StringBuffer Class -> 기존에 알고 있는 것과 다르게 equals는 이 클래스에서는 == 와 완전히 동일하게 작동한다. 
    자바에서 최상위 개념인 오브젝트에는 equals가 선언이 되어있다. 오브젝트에 있는 equals는 == 와 동일하게 작동하게 선언 되어있다.
    String Class에서는 이 equals를 오버라이딩(재정의)하여 안에 값을 비교할 수 있도록 만든 것이다.
    하지만 StringBuffer에서는 이러한 오버라이딩이 없으므로 == 와 동일하게 작동한다.

4.
    Short Circuit
    & vs &&
    and 연산에서 앞이 0이면 뒤가 0이든 1이든 결과가 0이므로 뒤를 볼 필요가 없다.
    or 연산에서 앞이 1이면 뒤가 0이든 1이든 결과가 1이므로 뒤를 볼 필요가 없다.
    이렇게 뒤를 관찰할 필요가 없게 해주는 것이 short circuit이며 && ||가 이에 해당한다.(& | 는 둘다 확인하므로 뒤에 조건에 에러가 발생하면 에러 발생. short circuit은 발생 x)

5.
    Anonymous Inner Class
    익명 내부 클래스

6.
    byte a = 3;
    a = a * 3;
    숫자는 기본적으로 Int형이 된다. Int와 byte를 곱하면 Int가 된다.
    아래 코드에서 Int형인 우변을 byte인 좌변에 넣으면 에러가 발생한다.

7. 
    int a = 3;
    long b = 3;
    a = a*b; -> 6번과 같이 int에 long을 대입이므로 int(a*b) 해야한다.